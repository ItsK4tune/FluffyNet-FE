import React, { useState } from 'react';
import { cn } from "../libs/utils"; // Gi·∫£ s·ª≠ b·∫°n c√≥ h√†m ti·ªán √≠ch cn
import { InputForm } from "../components/elements/input-form"; // Import input component c·ªßa b·∫°n
import { useNavigate } from 'react-router-dom'; // Import hook ƒë·ªÉ ƒëƒÉng xu·∫•t

// Placeholder cho d·ªØ li·ªáu ng∆∞·ªùi d√πng - b·∫°n c·∫ßn l·∫•y t·ª´ state ho·∫∑c API
const initialUserData = {
    avatarUrl: "https://via.placeholder.com/150/FFB6C1/FFFFFF?text=FN", // URL ·∫£nh avatar m·∫´u
    displayName: "Fluffy User",
    username: "fluffy_user", // Th∆∞·ªùng kh√¥ng ƒë·ªïi ƒë∆∞·ª£c username
    bio: "Just floating on my fluffy cloud ‚òÅÔ∏è Sharing thoughts and sparkles ‚ú®",
    email: "user@fluffynet.site" // C√≥ th·ªÉ hi·ªÉn th·ªã nh∆∞ng kh√¥ng cho s·ª≠a tr·ª±c ti·∫øp ·ªü ƒë√¢y
};

// Interface cho d·ªØ li·ªáu ng∆∞·ªùi d√πng (t√πy ch·ªânh theo c·∫•u tr√∫c c·ªßa b·∫°n)
interface UserData {
    avatarUrl: string;
    displayName: string;
    username: string;
    bio: string;
    email: string;
}

export const Setting = () => {
    const navigate = useNavigate();
    const [userData, setUserData] = useState<UserData>(initialUserData);
    const [displayName, setDisplayName] = useState(userData.displayName);
    const [bio, setBio] = useState(userData.bio);
    const [currentPassword, setCurrentPassword] = useState('');
    const [newPassword, setNewPassword] = useState('');
    const [confirmPassword, setConfirmPassword] = useState('');
    const [message, setMessage] = useState({ text: '', type: 'error' }); // L∆∞u message v√† lo·∫°i (error/success)

    // State cho c√†i ƒë·∫∑t th√¥ng b√°o (v√≠ d·ª•)
    const [notiLikes, setNotiLikes] = useState(true);
    const [notiComments, setNotiComments] = useState(true);
    const [notiFollows, setNotiFollows] = useState(true);

    const handleProfileSave = (e: React.FormEvent) => {
        e.preventDefault();
        setMessage({ text: '', type: 'error' }); // Clear message
        console.log("Saving profile:", { displayName, bio });
        // --- TODO: G·ªçi API ƒë·ªÉ l∆∞u thay ƒë·ªïi h·ªì s∆° ---
        // Gi·∫£ l·∫≠p th√†nh c√¥ng:
        setUserData(prev => ({ ...prev, displayName, bio }));
        setMessage({ text: 'Profile updated successfully! ‚ú®', type: 'success' });
        setTimeout(() => setMessage({ text: '', type: 'error' }), 3000); // X√≥a message sau 3s
    };

    const handlePasswordChange = (e: React.FormEvent) => {
        e.preventDefault();
        setMessage({ text: '', type: 'error' }); // Clear message
        if (newPassword !== confirmPassword) {
            setMessage({ text: "New passwords don't match!", type: 'error' });
            return;
        }
        if (!currentPassword || !newPassword) {
            setMessage({ text: "Please fill in all password fields!", type: 'error' });
            return;
        }
        console.log("Changing password...");
        // --- TODO: G·ªçi API ƒë·ªÉ ƒë·ªïi m·∫≠t kh·∫©u ---
        // Truy·ªÅn currentPassword, newPassword
        // X·ª≠ l√Ω k·∫øt qu·∫£ th√†nh c√¥ng ho·∫∑c th·∫•t b·∫°i
        // Gi·∫£ l·∫≠p th√†nh c√¥ng:
        setMessage({ text: 'Password changed successfully! üîí', type: 'success' });
        setCurrentPassword('');
        setNewPassword('');
        setConfirmPassword('');
        setTimeout(() => setMessage({ text: '', type: 'error' }), 3000);
    };

     const handleLogout = () => {
         // --- TODO: Th·ª±c hi·ªán logic ƒëƒÉng xu·∫•t ---
         // V√≠ d·ª•: X√≥a token trong localStorage
         Object.keys(localStorage).forEach((key) => {
            if (key.startsWith("jwt:")) {
                localStorage.removeItem(key);
            }
        });
         // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang login
         navigate('/login');
     };

    // Component Section Title cho ƒë·ªìng b·ªô
    const SectionTitle = ({ children }: { children: React.ReactNode }) => (
        <h2 className="text-2xl font-semibold text-pink-500 mb-4 pb-2 border-b border-pink-200">
            {children}
        </h2>
    );

     // Component Toggle Switch cho c√†i ƒë·∫∑t th√¥ng b√°o
    const ToggleSwitch = ({ label, checked, onChange }: { label: string, checked: boolean, onChange: (e: React.ChangeEvent<HTMLInputElement>) => void }) => (
        <label className="flex items-center justify-between cursor-pointer py-2">
            <span className="text-gray-700">{label}</span>
            <div className="relative">
                <input type="checkbox" className="sr-only peer" checked={checked} onChange={onChange} />
                <div className="w-11 h-6 bg-gray-200 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-pink-400"></div>
            </div>
        </label>
    );

    return (
        // Layout ch√≠nh, th√™m padding v√† l√†m n·ªÅn tr·∫Øng/h·ªìng nh·∫°t
        <div className="min-h-screen bg-pink-50 p-4 md:p-8 flex justify-center">
            <div className="w-full max-w-3xl bg-white rounded-2xl shadow-lg p-6 md:p-10">
                <h1 className="text-3xl md:text-4xl font-bold text-center text-pink-500 mb-8 font-serif">
                    Fluffy Settings <span className="text-2xl">‚öôÔ∏è</span>
                </h1>

                {/* --- Ph·∫ßn Edit Profile --- */}
                <section className="mb-10">
                    <SectionTitle>Profile Fluffiness <span className="text-xl">üêæ</span></SectionTitle>
                    <form onSubmit={handleProfileSave} className="space-y-5">
                        <div className="flex flex-col items-center space-y-3">
                            <img
                                src={userData.avatarUrl}
                                alt="Avatar"
                                className="w-24 h-24 rounded-full object-cover border-4 border-pink-200 shadow-md"
                            />
                            <button type="button" className="text-sm text-pink-500 hover:text-pink-700 font-medium">Change Avatar</button>
                             {/* TODO: X·ª≠ l√Ω upload ·∫£nh */}
                        </div>
                        {/* S·ª≠ d·ª•ng InputForm component c·ªßa b·∫°n */}
                         <InputForm
                             name="displayName"
                             icon="person" // Ch·ªçn icon ph√π h·ª£p
                             placeholder="Display Name"
                             value={displayName}
                             onChange={(e) => setDisplayName(e.target.value)}
                         />
                         <div>
                             <label className="block text-sm font-medium text-gray-500 mb-1">About You (Bio)</label>
                            <textarea
                                value={bio}
                                onChange={(e) => setBio(e.target.value)}
                                placeholder="Tell us about your fluffiness..."
                                rows={3}
                                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-pink-300 focus:border-pink-300 placeholder-gray-400"
                            />
                        </div>
                         <InputForm
                            name="username"
                            icon="alternate_email" // Icon ph√π h·ª£p
                            placeholder="Username"
                            value={userData.username}
                         />
                         <InputForm
                            name="email"
                            icon="mail" // Icon ph√π h·ª£p
                            placeholder="Email"
                            value={userData.email}
                        />

                         <div className="text-center">
                            <button
                                type="submit"
                                className="px-6 py-2 bg-pink-400 text-white font-semibold rounded-full shadow hover:bg-pink-500 transition duration-200"
                             >
                                Save Profile Changes
                            </button>
                        </div>
                    </form>
                </section>

                 {/* Hi·ªÉn th·ªã th√¥ng b√°o */}
                 {message.text && (
                    <p className={`text-center my-4 p-2 rounded-md text-sm ${message.type === 'success' ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'}`}>
                        {message.text}
                    </p>
                 )}


                {/* --- Ph·∫ßn Change Password --- */}
                 <section className="mb-10">
                     <SectionTitle>Password Security <span className="text-xl">üîí</span></SectionTitle>
                     <form onSubmit={handlePasswordChange} className="space-y-4">
                        <InputForm
                             name="currentPassword"
                            icon="lock_person"
                             type="password"
                            placeholder="Current Password"
                            value={currentPassword}
                             onChange={(e) => setCurrentPassword(e.target.value)}
                        />
                         <InputForm
                             name="newPassword"
                            icon="lock_reset"
                             type="password"
                             placeholder="New Password"
                            value={newPassword}
                             onChange={(e) => setNewPassword(e.target.value)}
                         />
                         <InputForm
                             name="confirmPassword"
                            icon="enhanced_encryption"
                             type="password"
                            placeholder="Confirm New Password"
                             value={confirmPassword}
                             onChange={(e) => setConfirmPassword(e.target.value)}
                         />
                         <div className="text-center">
                             <button
                                 type="submit"
                                className="px-6 py-2 bg-pink-400 text-white font-semibold rounded-full shadow hover:bg-pink-500 transition duration-200"
                            >
                                Change Password
                             </button>
                         </div>
                     </form>
                 </section>

                {/* --- Ph·∫ßn Notification Settings --- */}
                 <section className="mb-10">
                    <SectionTitle>Notification Sprinkles <span className="text-xl">üîî</span></SectionTitle>
                     <div className="space-y-1 max-w-sm mx-auto">
                         <ToggleSwitch label="Likes on your posts" checked={notiLikes} onChange={(e) => setNotiLikes(e.target.checked)} />
                         <ToggleSwitch label="Comments on your posts" checked={notiComments} onChange={(e) => setNotiComments(e.target.checked)} />
                        <ToggleSwitch label="New followers" checked={notiFollows} onChange={(e) => setNotiFollows(e.target.checked)} />
                         {/* Th√™m c√°c c√†i ƒë·∫∑t th√¥ng b√°o kh√°c n·∫øu c·∫ßn */}
                     </div>
                     {/* N√∫t l∆∞u cho th√¥ng b√°o c√≥ th·ªÉ kh√¥ng c·∫ßn n·∫øu thay ƒë·ªïi ƒë∆∞·ª£c √°p d·ª•ng ngay l·∫≠p t·ª©c
                         <div className="text-center mt-4">
                            <button className="px-6 py-2 bg-pink-400 text-white font-semibold rounded-full shadow hover:bg-pink-500 transition duration-200">
                                Save Notification Settings
                            </button>
                        </div>
                     */}
                </section>

                 {/* --- Ph·∫ßn Logout --- */}
                <section className="text-center mt-10 pt-6 border-t border-pink-100">
                     <button
                        onClick={handleLogout}
                         className="px-8 py-3 bg-red-100 text-red-600 font-semibold rounded-full shadow hover:bg-red-200 hover:text-red-700 transition duration-200"
                    >
                         Log Out <span className="ml-1">üö™</span>
                     </button>
                </section>

            </div>
        </div>
    );
};